export const enUS = {
   word: {
      client: 'Client | Clients',
      server: 'Server | Servers',
      host: 'Host | Hosts',
      message: 'Message | Messages',
      server_message: 'Response Message | Response Messages',
      port: 'Port | Ports',
      data: 'Data | Data',
      name: 'Name | Names',
      start: 'Start',
      stop: 'Stop',
      send: 'Send',
      total: 'Total | Totals',
      received: 'Received | Received',
      sent: 'Sent | Sent',
      socket: 'Socket | Sockets',
      format: 'Format',
      select: 'Select',
      cancel: 'Cancel',
      edit: 'Edit',
      create: 'Create',
      reset: 'Reset',
      settings: 'Settings',
      close: 'Close',
      locale: 'Locale',
      author: 'Author',
      source: 'Source'
   },
   message: {
      running: 'Running',
      numberOfMessages: 'Number of messages',
      numberOfClients: 'Number of clients',
      minInterval: 'Min. Interval (ms)',
      maxInterval: 'Max Interval (ms)',
      closeOnReply: 'Close on reply',
      persistentConnection: 'Persistent connection',
      steptest: 'Step test',
      enableTrace: 'Enable traces',
      alertEconnreset: 'Alert ECONNRESET',
      loopMode: 'Loop mode',
      loopModeEsplaination: 'Repeat the test after its completion',
      sendMessages: 'Send messages',
      addHost: 'Add host',
      deleteHost: 'Delete host "{host}"',
      addMessage: 'Add message',
      editMessage: 'Edit message',
      deleteMessage: 'Delete message "{message}"',
      hostAddress: 'Host address',
      addPort: 'Add port',
      echoServer: 'Echo server',
      resetReceivedData: 'Reset received data',
      serverStatus: 'Server status',
      testReport: 'Test report',
      testStarted: 'Test started',
      testAborted: 'Test aborted',
      testEnded: 'Test ended',
      clientsConnected: 'Clients connected',
      messagesSent: 'Messages sent',
      testDuration: 'Test duration: {ms}ms',
      noMessageSpecified: 'No message specified',
      socketOpen: 'Socket #{number} on {host}:{port} open',
      socketClosed: 'Socket #{number} on {host}:{port} closed',
      socketMessage: 'Socket #{number} on {host}:{port} message #{mNumber}',
      socketReply: 'Socket #{number} on {host}:{port} reply: {reply}',
      logOnSocket: 'Socket #{number} on {host}:{port}: {message}',
      loadingMessages: 'Loading messages',
      messagesLoaded: 'Messages loaded: {mNumber}',
      sendingMessages: 'Sending messages',
      tracesDisabledMessage: 'Traces disabled, intervals too short',
      clientConnectedOnPort: 'Client connected on port {port}',
      clientDisonnectedOnPort: 'Client disconnected on port {port}',
      messageReceivedOnPort: 'Message received on port {port}: {message}',
      serverStart: 'Server start',
      serverStop: 'Server stop',
      listenindOnPort: 'Listening on port {port}',
      clientErrorOnPort: 'Client error on port {port}: {error}',
      serverErrorOnPort: 'Server error on port {port}: {error}',
      reportError: 'Report error: {error}'
   }
};
